name: Docker Image Build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

    paths-ignore:
      - '.devcontainer/**'
      - 'docs/**'
      - '**.md'

    tags:
      - v*

jobs:

  docker-build-push:

    runs-on: ubuntu-latest
    env:
      # Docker repo information
      # set these secrets to push to docker hub
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PAT: ${{ secrets.DOCKER_PAT }}

      # Set these secrets to push to Azure Container Registry
      # Azure login information
      TENANT: ${{ secrets.TENANT }}
      SERVICE_PRINCIPAL: ${{ secrets.SERVICE_PRINCIPAL }}
      SERVICE_PRINCIPAL_SECRET: ${{ secrets.SERVICE_PRINCIPAL_SECRET }}

      # ACR repo information
      ACR_REG: ${{ secrets.ACR_REG }}
      ACR_REPO: ${{ secrets.ACR_REPO }}
      ACR_IMAGE: ${{ secrets.ACR_IMAGE }}

      AZURE_SET: false
      DOCKER_SET: false
      ACR_SET: false

    steps:
    - uses: actions/checkout@v1

    - name: Set conditions
      run: |
        echo "::set-env name=AZURE_SET::${{ env.SERVICE_PRINCIPAL_SECRET != '' && env.TENANT != '' && env.SERVICE_PRINCIPAL != '' && env.KEYVAULT_NAME != '' }}"
        echo "::set-env name=DOCKER_SET::${{ env.DOCKER_PAT != '' && env.DOCKER_REPO != '' && env.DOCKER_USER != '' }}"
        echo "::set-env name=ACR_SET::${{ env.ACR_REG != '' && env.ACR_REPO != '' && env.ACR_IMAGE !='' }}"

    - name: Build Container
      run: docker build . -t image

    - name: Docker Push
      if: ${{ env.DOCKER_SET == 'true' }}
      run: |
        ## login to docker hub
        echo "${{ secrets.DOCKER_PAT }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

        # tag the image with :beta
        docker tag image ${DOCKER_REPO}:beta

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          VERSION=$(echo $VERSION | sed -e 's/^v//')

          # tag the image with :Version and :latest
          docker tag image ${DOCKER_REPO}:$VERSION
          docker tag image ${DOCKER_REPO}:latest
        fi

        # Push to the repo
        docker push $DOCKER_REPO

    - name: ACR Push
      if: ${{ env.ACR_SET == 'true' && env.AZURE_SET == 'true' }}
      run: |
        # login to Azure
        az login --service-principal -u ${SERVICE_PRINCIPAL} --tenant ${TENANT} -p ${SERVICE_PRINCIPAL_SECRET}

        # login to acr
        az acr login -n ${ACR_REG}
        
        # tag the repo with :beta
        docker tag image $ACR_REPO:beta

        # Show the ACR repository informaion to confirm SHA
        echo "${ACR_IMAGE}:beta info:"
        az acr repository show -n ${ACR_REG} --image ${ACR_IMAGE}:beta -o table

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        
          # Strip "v" prefix from tag name
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          # tag the image with :version and :stable
          docker tag image $ACR_REPO:$VERSION
          docker tag image $ACR_REPO:latest
          
          # Show the ACR repository informaion to confirm SHA
          echo "${ACR_IMAGE}:${VERSION} info:"
          az acr repository show -n ${ACR_REG} --image ${ACR_IMAGE}:${VERSION} -o table

          echo "${ACR_IMAGE}:stable info:"
          az acr repository show -n ${ACR_REG} --image ${ACR_IMAGE}:stable -o table
        fi

        # Push to the repo
        docker push ${ACR_IMAGE}
